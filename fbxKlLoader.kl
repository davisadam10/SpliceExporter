require Math;
require Geometry;
require Fbx;
require Util;


operator fbxLoad(
  String filePath,
  ImporterOptions options,
  io FbxHandle handle,
  io Boolean reload
) {
  
  if(filePath.length() > 0) {
    if(handle != null && reload){
      handle.clear();
    }
    else{
      handle = FbxHandle();
    }
    handle.openFileHandle(filePath, options.getStringOption('textureBasePath', ''));
    reload = false;
  }
}

operator fbxGetIdentifiers(
  Index index,
  ImporterOptions options,
  String filePath,
  io FbxHandle handle,
  io ImporterIdentifier identifiers[]
) {
  handle.getIdentifiers(identifiers, options);
  for(Size i=0;i<identifiers.size();i++) {
    identifiers[i].fileIndex = index;
    identifiers[i].filePath = filePath;
  }
}

operator entry(in String filePath, io PolygonMesh output){
  	ImporterOptions options = ImporterOptions();
  	FbxHandle handle = FbxHandle();
  	Boolean reload = true;
	
	
  fbxLoad(
  		filePath,
  		options,
  		handle,
  		reload
  	);

 	Index index = 1;
 	ImporterIdentifier identifiers[];
 	fbxGetIdentifiers(
  		index,
  		options,
  		filePath,
  		handle,
  		identifiers
	);

 	PolygonMesh finalMesh = PolygonMesh();
  	for(Size i=0;i<identifiers.size();i++) {
    	if (identifiers[i].type == "MESH"){
    		report(identifiers[i].name);
        UInt32 polygonSizes[];
	  		UInt32 packedPolyPointIndices[];
	  		Vec3 positionsData[];
	  		Vec3 polyPointNormalsData[];
	  		Vec2 polyPointUVsData[][];

	  	
	  		handle.parsePolygonMeshAndAttributes( identifiers[i], polygonSizes, packedPolyPointIndices, positionsData, polyPointNormalsData, polyPointUVsData);
	  		UInt32 nbPoints = positionsData.size();
	  		UInt32 nbPolys = polygonSizes.size();
			PolygonMesh mesh = PolygonMesh();

			mesh.createPoints( nbPoints );
			mesh.addPolygons( polygonSizes, packedPolyPointIndices );

			Ref<Vec3Attribute> normals = mesh.getOrCreateNormals();

			for( i = 0; i < nbPoints; ++i )
				mesh.setPointPosition( i, positionsData[i] * 1.0 );
			mesh.incrementPointPositionsVersion();

			mesh.setAttributeFromPolygonPackedData( 'normals', polyPointNormalsData );
			normals.incrementVersion();
			if( polyPointUVsData.size() != 0 ) {
				for( i = 0; i < polyPointUVsData.size(); ++i )
			  		mesh.setAttributeFromPolygonPackedData( 'uvs'+i, polyPointUVsData[i] );
			}
			finalMesh.mergeMesh(mesh);
    	}	
		
	};

	output = finalMesh;
}