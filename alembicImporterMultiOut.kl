require Math;
require Geometry;
require Xfo;
require AlembicWrapper;


operator meshToWorld<<<index>>>(io PolygonMesh mesh, Mat44 worldMatrix ){
  Vec3 pointPos = mesh.getPointPosition(index);
  
  Mat44 pointMatrix = Mat44();
  pointMatrix.setIdentity();
  pointMatrix.setTranslation(pointPos);

  Mat44 worldPointPos = worldMatrix * pointMatrix;
  mesh.setPointPosition(index, worldPointPos.translation());
}

operator entry(Integer spacing, Integer numberOfCopies, io PolygonMesh myOutMeshes[], String alembicCachePath) {
  
  if (myOutMeshes.size() != numberOfCopies)
  {
    myOutMeshes.resize(numberOfCopies);
  }
  AlembicArchiveReader reader = AlembicArchiveReader(alembicCachePath);
  String allPaths[] = reader.getAllPaths();
  Integer i;
  
  for (i=0; i<allPaths.size(); i++)
  {
    AlembicPolyMeshReader meshReader = reader.getPolyMesh(allPaths[i]);
    PolygonMesh tmpMesh = PolygonMesh();
    meshReader.readSample(0, tmpMesh);
    Integer a;
    Integer startOffset = 20;

    for (a=0; a<numberOfCopies; a++)
    {
  		PolygonMesh tmpAdam = tmpMesh.clone();
      myOutMeshes[a] = tmpAdam;
  		Mat44 worldMatrix = Mat44();
  		worldMatrix.setIdentity();
  		startOffset += (spacing * a);
  		worldMatrix.setTranslation(Vec3(startOffset, 0,0));
  		
      
      report ("\n\n\n\nNUMBER OF COPIES");
      meshToWorld <<<myOutMeshes[a].pointCount()>>> (myOutMeshes[a], worldMatrix);
      report ("DONE");
  	}
  }
}
