require Math;
require Geometry;
require Xfo;
require AlembicWrapper;


operator meshToWorld<<<index>>>(io PolygonMesh mesh, Mat44 worldMatrix ){
  Vec3 pointPos = mesh.getPointPosition(index);
  
  Mat44 pointMatrix = Mat44();
  pointMatrix.setIdentity();
  pointMatrix.setTranslation(pointPos);

  Mat44 worldPointPos = worldMatrix * pointMatrix;
  mesh.setPointPosition(index, worldPointPos.translation());
}

operator cloneMesh<<<count>>>(Integer spacing, PolygonMesh inMesh, io PolygonMesh myOutMeshes[])
{
  
  myOutMeshes[count] = inMesh.clone();
  
  Mat44 worldMatrix = Mat44();
  Integer startOffset = 0;

  worldMatrix.setIdentity();
  startOffset += (spacing * count);
  worldMatrix.setTranslation(Vec3(startOffset, 0,0));
  meshToWorld <<<myOutMeshes[count].pointCount()>>>(myOutMeshes[count], worldMatrix);
}

operator entry(Integer spacing, Integer numberOfCopies, io PolygonMesh myOutMeshes[], String alembicCachePath) {
  
  if (myOutMeshes.size() != numberOfCopies)
  {
    myOutMeshes.resize(numberOfCopies);
  }
  AlembicArchiveReader reader = AlembicArchiveReader(alembicCachePath);
  String allPaths[] = reader.getAllPaths();
  Integer i;
  
  for (i=0; i<allPaths.size(); i++)
  {
    AlembicPolyMeshReader meshReader = reader.getPolyMesh(allPaths[i]);
    PolygonMesh inMesh = PolygonMesh();
    meshReader.readSample(0, inMesh);
    cloneMesh<<<numberOfCopies>>>(spacing, inMesh, myOutMeshes);
  }
}
